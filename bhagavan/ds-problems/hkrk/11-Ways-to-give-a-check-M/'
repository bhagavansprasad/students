coins = [ "K", "Q", "N", "R", "B", "P", "k", "q", "n", "r", "b", "p"]

coins_n_pos = {
	"K":(),  "Q":(),  "N1":(), "B1":(), "R1":(), "N2":(), "B2":(), "R2":(),
	"P1":(), "P2":(), "P3":(), "P4":(), "P5":(), "P6":(), "P7":(), "P8":(), 
	"k":(),  "q":(),  "n1":(), "b1":(), "r1":(), "n2":(), "b2":(), "r2":(),
	"p1":(), "p2":(), "p3":(), "p4":(), "p5":(), "p6":(), "p7":(), "p8":()
}
maxrows = 8
maxcols = 8

def add_pawn(coin, row, col):
	for i in range (1, maxcols+1):
		key = coin+str(i)
		if (not coins_n_pos[key]):
			coins_n_pos[key] = (row, col)
			break
			
def add_others(coin, row, col):
	key = coin+str(1)
	if (not coins_n_pos[key]):
		coins_n_pos[key] = (row, col)
	else:
		key = coin+str(2)
		coins_n_pos[key] = (row, col)
	
def add_element(coin, row, col):
	if (coin == "K" or coin == "Q" or coin == "k" or coin == "q"):
		coins_n_pos[coin] = (row, col)
	elif (coin == "P" or coin == "p"):
		add_pawn(coin, row, col)
	elif (coin == "P" or coin == "p"):
		add_others(coin, row, col)
	
	#"N", "R", "B", "P", "k", "q", "n", "r", "b", "p"]
	
def dump_board():
	for element in coins_n_pos.items():
		if (element[1]):
			print (element)

def get_count(board):
	#print (board)
	#print (coins_n_pos)

	for (i, line) in enumerate(board):
		for (j, coin) in enumerate(coins):
			pos = line[0].find(coin)
			if (pos >= 0):
				print ("row :%d, col :%d, coin :%s, pos :%d, line :%s" % (maxrows-i, pos+1, coin, j, line))
				add_element(coin, maxrows-i, pos+1)

	#dump_board()
	print (coins_n_pos["k"])

d1 = [
["########"],
["#k#P####"],
["########"],
["########"],
["########"],
["########"],
["#K######"],
["########"]
]

d2 = [
["########"],
["######P#"],
["####k###"],
["########"],
["########"],
["########"],
["####K###"],
["########"]
]

def main():
	get_count(d1)
	get_count(d2)

if (__name__ == "__main__"):
	main()


