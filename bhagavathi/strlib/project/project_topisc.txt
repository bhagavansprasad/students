 Arrays
------      
1. Write a function to insert an element to an array.

   int db_insert_element(<arrary baseaddress>, <value>, <index>);
   - Array should maintain a global variable "number of elements" present in
     the array.
   - Index given by the user should never be more than the index.

2. Write a program to delete an element from the array.
   int db_delete_element(<arrary baseaddress>, <index>);
   - Array should maintain a global variable "number of elements" present in
     the array.
   - Index given by the user should never be more than the index.

3. Re-write above programs to insert into ordered array.
   Ordered array is one whose elements are placed in the increasing order or
   decreasing order of the value of the element.

5. Write a function to remove the duplicate elements from a global array int
   array[100].  Replace all the duplicate elements with zero.  

6. Write a function to remove the duplicate elements from a global array int
   array[100].  After removing each duplicate element all the following
   elements should be pushed up.

Strings
-------
1. Write a simple caliculater program which does...
   - accept the following ASCII string commands
   - messages as input and processes those commands.
   - for each command it returns ASCII response message.
   Following are the ascii command messages which are passed to the functions
   and the function returns result

   ex. int add_numers(char *command_string);
   add  < integer >  < integer >  /* Adds first and second integers  */
   	"add 10 20"
   	"add             10               20            "
   	"         add             10               20            "

   sub  < integer >  < integer >  /* Substracts second from  first   */
   div  < integer >  < integer >  /* divides first with second   */
   mul  < integer >  < integer >  /* Multiplies first and second integers  */


#include <stdio.h>
int data_base[4][2],i;
int store_into_db(int pid,int giffs)
{
	for(i=0;i<4;i++)
	{
	if(data_base[i][0]==pid)
	 return giffs-data_base[i][1];
	}
}
int ovc(int rfd)
{

	int cpu_occ;
	for (;;)
	{
		int r;
		//read_giffs_from_pipe(rfd, &pid, &giffs);
		r=read(rfd,data_base,sizeof(data_base));
		for(i=0;i<4;i++)
		{
			cpu_occ = store_into_db(data_base[i][0],data_base[i][1]);
			printf("---------->pid %d\tcpu occupency %d\n",data_base[i][0],cpu_occ);
	//		take_action(pid, cpu_occ);
	//		clean_up_db();
		}
	}
}
File Management
---------------      
1. Write a program which counts number of bytes and number of words in any given
text file
2. Write a funtion to read n'th word from a file and print
3. Build your own copy command to copy file1 content to file2
   ex. acopy temp1.txt temp2.txt
4. Write a function to read n'th and n+1 words sum from a file and print

Process Management
------------------
1. Run the following program, and write your observation?
   main()
   { 
	printf( " I am forking a child process \n ");
	fork ();
	printf( "who am i ? child or parent ? My ID process : %u \n ", getpid());
   }

2. Modify the above program by adding two more fork() statements (total three
   forks()) after the first fork statement.  Total how many processes will be
   created.  Check your results by running the program.

3. Write a program to get and  print the following process identifiers.
   process id, parent process id, user id, effective user id, group id and
   effective group id

4. Rewrite the above which identifies the process as parent or child
   based on the return value of fork() and displays all the process identifiers
   given in above problem.

5. What happens with bellow program?   Write your observation by running above
   program from one shell and from another shell run the command 'top'
   main()process 
   {
	printf("pid :%d\r\n", getpid());

	while(1)
		printf("1");
   }
   
6. Print the content of the file 'stat' in the path '/proc/<pid>/stat' 
   ex. cat /proc/1020/stat

Signals
-------      
1. From shell How to kill a process?
2. Print the priority of a process
3. Write a program to catch the "SIGINT" signal .  In the main program use
   pause() signal in a for loop for 5 times.  In the signal handler print 
   "I caught the SIGINT signal"

4. Install a signal handler for Alarm signal.  Next take sleep time from the
   user and give Alarm( ) with the given number of seconds.  Now use pause to 
   wait for signal.  Print a message for alarm signal handler.

Memory Management
------------------------      
1. What happens with bellow program?  Write your observation by running program
   and its memory usage from one shell and command top' from another shell 

   main()
   {
	int *ptr;

	sleep(10);
	ptr = malloc(10000000); 
	sleep(10);

	free(ptr);
   }

Inter Process Communication
------------------------      
1. Why IPC is required?
2. How to create PIPE?
3. Send "Hello Aura" message from parent to chaild process over PIPE
4. Implement the calculator client and server program as two separate process
   (parent and child) both communicating through pipes.  Calculator client is
   the parent process. Calculator server is the child process.  Two pipes
   should be established between the client and server process, one in each
   direction.  Client takes the Calculator command and parameters from the user
   and sends the message to the server over a pipe.  now client waits at the
   input pipe from the server and displays the response sent by the server.  

5. Write a program to create a message queue using a given key.
6. Write a program to display the following elements of a given message queue.
   * Current number of bytes on queue
   * Number of messages on queus
   * Max number of bytes on queue
7. Write a program to remove the given message queue.
8. Write a program to take message queue key, message id, type and message from
   the user and to send the message to the queue
9. Write a program to take message queue key and message id/type from the user.
   Next it should read the given message from the given message queue and
   display.  it should do non-blocking receive.  If no message present it
   should come out of the program

10. Modify the exercise 6 to do blocking receive.  Once message is received it
   should display the message.  To test this program, use the program developed
   in exercise 5, from the second virtual terminal.
