#include <stdio.h>
#include <stdlib.h>

#define ROWS 3

int MMM_Req[ROWS][2] = {
	{104, 10},
	{504, 5},
	{1004, 5}
};

typedef struct NODE
{
	void *s;
	int flag;
	struct NODE *next;
}node;

node *hlist[ROWS]={NULL};

void init_free_pool(char *p, int size, int bcount)
{
	int len = 0, i;

	for(i = 0; i < bcount; i++)
	{
		add_free_buffer(p + len, size);

		printf("P+LEN is : %p\n", p + len);

		len = len + size;
	}

	return 0;
}

void display()
{
	node *t;
	int i;
	for(i=0;i<3;i++)
	{
		if(hlist[i]!=NULL)
		{
			t=hlist[i];
			for(t=hlist[i];t!=NULL;t=t->next)
			{
				printf("----->p : %p\n", t->s);
			}
			if(hlist[i]!=NULL)
				printf("\n");
		}
	}
}


void mem_init()
{
	int i, size = 0, len = 0;
	char *p;

	for(i = 0; i < ROWS; i++)
		size = size + (MMM_Req[i][0] * MMM_Req[i][1]);

	printf("size is : %d\n", size);

	p = malloc(size);



	for(i = 0; i < ROWS; i++)
	{
		init_free_pool(p + len, MMM_Req[i][0], MMM_Req[i][1]);
		len = len + (MMM_Req[i][0] * MMM_Req [i][1]);
	}

	display();
}

int add_free_buffer(char *p, int size)
{
	int k = get_hash_key(size);
	node *new,*temp;

	new = malloc(sizeof(node));
	new->s = p;
	new->next = NULL;
	new->flag=1;
	p=new;

	if(hlist[k] == NULL)
	{
		hlist[k] = new;
		return 0;
	}

	for(temp = hlist[k]; temp->next != NULL; temp = temp->next);
	temp->next = new;

	return 0;
}

int get_hash_key(int size)
{
#if 0
	if(size=a[0][0])
		return 0;
	else if(size=a[1][0])
		return 1;
	else if(size=a[2][0])
		return 2;
#endif
	int i,j;

	for(i = 0, j = 0; i < ROWS; i++, j++)
	{
		if(size == MMM_Req[i][0])
		{
			printf("hkey returning K: %d\n",j);
			return j;
		}
	}
}

main()
{
	mem_init();
}

void *amalloc(int size)
{
	node *temp;
	int hk;
	hk=get_hash_key(size);
	for(temp=hlist[hk];temp!=NULL;temp=temp->next)
	{
		if(temp->flag==1)
		{
			temp->flag=0;
			return (temp->s+4);
		}
		else
			return NULL;

	}
	void afree(void *p)
	{
		node *new;
		new=*((int *)p-1);
		if(new->flag==0)
		{
			new->flag=1;
		}	
	}
}
